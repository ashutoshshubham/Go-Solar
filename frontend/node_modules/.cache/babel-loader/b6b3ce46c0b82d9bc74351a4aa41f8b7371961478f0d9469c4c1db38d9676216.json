{"ast":null,"code":"var _jsxFileName = \"D:\\\\My_Major_Project-master\\\\frontend\\\\src\\\\components\\\\main\\\\CheckOutForm.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckOutForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"https://example.com/order/123/complete\"\n      }\n    });\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      console.log(result.error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !stripe,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(CheckOutForm, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckOutForm;\nexport default CheckOutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckOutForm\");","map":{"version":3,"names":["React","useStripe","useElements","PaymentElement","CheckOutForm","stripe","elements","handleSubmit","event","preventDefault","result","confirmPayment","confirmParams","return_url","error","console","log","message"],"sources":["D:/My_Major_Project-master/frontend/src/components/main/CheckOutForm.jsx"],"sourcesContent":["import React from 'react'\r\nimport { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js';\r\n\r\nconst CheckOutForm = () => {\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    const handleSubmit = async (event) => {\r\n        // We don't want to let default form submission happen here,\r\n        // which would refresh the page.\r\n        event.preventDefault();\r\n\r\n        if (!stripe || !elements) {\r\n            // Stripe.js has not yet loaded.\r\n            // Make sure to disable form submission until Stripe.js has loaded.\r\n            return;\r\n        }\r\n\r\n        const result = await stripe.confirmPayment({\r\n            //`Elements` instance that was used to create the Payment Element\r\n            elements,\r\n            confirmParams: {\r\n                return_url: \"https://example.com/order/123/complete\",\r\n            },\r\n        });\r\n\r\n        if (result.error) {\r\n            // Show error to your customer (for example, payment details incomplete)\r\n            console.log(result.error.message);\r\n        } else {\r\n            // Your customer will be redirected to your `return_url`. For some payment\r\n            // methods like iDEAL, your customer will be redirected to an intermediate\r\n            // site first to authorize the payment, then redirected to the `return_url`.\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <PaymentElement />\r\n            <button disabled={!stripe}>Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default CheckOutForm"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,WAAW,EAAEC,cAAc,QAAQ,yBAAyB;AAAC;AAEjF,MAAMC,YAAY,GAAG,MAAM;EAAA;EACvB,MAAMC,MAAM,GAAGJ,SAAS,EAAE;EAC1B,MAAMK,QAAQ,GAAGJ,WAAW,EAAE;EAE9B,MAAMK,YAAY,GAAG,MAAOC,KAAK,IAAK;IAClC;IACA;IACAA,KAAK,CAACC,cAAc,EAAE;IAEtB,IAAI,CAACJ,MAAM,IAAI,CAACC,QAAQ,EAAE;MACtB;MACA;MACA;IACJ;IAEA,MAAMI,MAAM,GAAG,MAAML,MAAM,CAACM,cAAc,CAAC;MACvC;MACAL,QAAQ;MACRM,aAAa,EAAE;QACXC,UAAU,EAAE;MAChB;IACJ,CAAC,CAAC;IAEF,IAAIH,MAAM,CAACI,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,GAAG,CAACN,MAAM,CAACI,KAAK,CAACG,OAAO,CAAC;IACrC,CAAC,MAAM;MACH;MACA;MACA;IAAA;EAER,CAAC;EAED,oBACI;IAAM,QAAQ,EAAEV,YAAa;IAAA,wBACzB,QAAC,cAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eAClB;MAAQ,QAAQ,EAAE,CAACF,MAAO;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACvC;AAEf,CAAC;AAAA,GAvCKD,YAAY;EAAA,QACCH,SAAS,EACPC,WAAW;AAAA;AAAA,KAF1BE,YAAY;AAyClB,eAAeA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}